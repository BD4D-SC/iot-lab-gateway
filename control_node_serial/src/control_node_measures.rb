# This file was automatically generated by oml2-scaffold V2.10.1
# The syntax of this file is documented at [0].
#
# [0] http://doc.mytestbed.net/doc/omf/OmfEc/Backward/AppDefinition.html
#
# To generate 'control_node_measures_oml.h' file use
#     oml2-scaffold --oml control_node_measures.rb
#

defApplication('iotlab:app:control_node_measures', 'control_node_measures') do |app|

  app.version(1, 0, 0)

  # Declare measurement points; generate OML injection helpers with
  #  oml2-scaffold --oml control_node_measures.rb
  app.defMeasurement("consumption") do |mp|
    mp.defMetric('timestamp_s', :uint32)
    mp.defMetric('timestamp_us', :uint32)
    mp.defMetric('power', :double)
    mp.defMetric('voltage', :double)
    mp.defMetric('current', :double)
  end

  app.defMeasurement("radio") do |mp|
    mp.defMetric('timestamp_s', :uint32)
    mp.defMetric('timestamp_us', :uint32)
    mp.defMetric('channel', :uint32)
    mp.defMetric('rssi', :int32)
  end

  app.defMeasurement("sniffer") do |mp|
    mp.defMetric('timestamp_s', :uint32)
    mp.defMetric('timestamp_us', :uint32)
    mp.defMetric('channel', :uint32)
    mp.defMetric('rssi', :int32)
    mp.defMetric('lqi', :uint32)
    mp.defMetric('crc_ok', :boolean)
    mp.defMetric('length', :uint32)
  end

  app.defMeasurement("event") do |mp|
    mp.defMetric('timestamp_s', :uint32)
    mp.defMetric('timestamp_us', :uint32)
    mp.defMetric('value', :uint32)
    mp.defMetric('name', :string)
  end

end

# Local Variables:
# mode:ruby
# End:
# vim: ft=ruby:sw=2
